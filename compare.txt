# -*- coding: utf-8 -*-
"""
Created on Sun Nov 14 16:13:29 2021

@author: finst
"""

import os
from functions_anomaly import *

##############################################################################
#パラメータの設定
##############################################################################
#カーネルPCAのパラメータ
kernel = "norm"
gamma = 1/len(train_data)
degree = 3
coef0 = 1
#スパースPCAのパラメータ
alpha = 1

#ホテリング
threshold_hote=0.1
#kNNのパラメータ
th_num_kNN = 2
th_dis_kNN = 2
kind_kNN = "E"
#eNNのパラメータ
th_num_eNN = 3
th_dis_eNN = 1
kind_eNN = "E"
#カーネル密度
kernel_den = "EXP"
band_width = 0.1
threshold_kernel = 0.1

##############################################################################
#計算の設置
##############################################################################
reduction = "PCA"
anomaly = "eNN"
after_dim = 3



##############################################################################
#計算の実行
##############################################################################

data_index = all_data.index
anomaly_list = []
for i in range(len(all_data)):
    judged_data = all_data.iloc[i,]
    
    if reduction == "PCA":
        res = reduction_PCA(train_data,judged_data,after_dim)
        train_data_use = res["train_data"]
        judged_data_use = res["judged_data"]
    elif reduction == "KPCA":
        res = reduction_KernelPCA(train_data,judged_data,after_dim,kernel,gamma=gamma,degree=degree,coef0 = coef0)
        train_data_use = res["train_data"]
        judged_data_use = res["judged_data"]
    elif reduction == "SPCA":
        res = reduction_SparsePCA(train_data,judged_data,after_dim,alpha = alpha)
        train_data_use = res["train_data"]
        judged_data_use = res["judged_data"]    
    elif reduction == "PPCA":
        res = reduction_ProbablePCA(train_data,judged_data,after_dim)
        train_data_use = res["train_data"]
        judged_data_use = res["judged_data"]
    elif reduction == "ICA":
        res = reduction_ICA(train_data,judged_data,after_dim)
        train_data_use = res["train_data"]
        judged_data_use = res["judged_data"]
    elif reduction == "None":
        train_data_use = train_data
        judged_data_use = judged_data
    else:
        sys.exit("正しい次元削減方法を選択してください")
    
    
    if anomaly == "hoteling":
        print("後で入力")
    elif anomaly == "kNN":
        result = kNN(train_data_use,judged_data_use,th_num_kNN,th_dis_kNN,kind_kNN)
    elif anomaly == "eNN":
        result = eNN(train_data_use,judged_data_use,th_dis_eNN,th_num_eNN,kind_eNN)
    elif anomaly == "kernel":
        result = kernel_density(train_data_use,judged_data_use,kernel_den,band_width,threshold_kernel)
    
    
    anomaly_list.append(result)
    
    