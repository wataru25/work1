#パッケージのインポート
import pandas as pd
import math
from scipy.stats import norm
from scipy.stats import lognorm
from scipy.stats import t
from scipy.special import kv
from scipy import optimize
import numpy as np



#%% 必要な情報
input_data_path = "C:/Users/ai199/Desktop/wataru/07_年末年始の作業/運企予兆/Nikkei225.csv"
start_train = "2018/4/20"
end_train = "2021/1/8"

# データの読み込み(日次の日経平均株価)
all_data = pd.read_csv(input_data_path,encoding = "shift-jis",index_col=0)
# 訓練データとして使用する時点数（現時点より前で何時点を推定のデータとして使用するか）
use_past_data = 10
#%% GH分布に関する定義

def GH_dist(x,lam,alpha,beta,delta,mu):
    first_factor_numerator = (alpha**2-beta**2)**(lam/2)
    first_factor_denominator =  ((2*math.pi)**(1/2))*(alpha**(lam-1/2))*(delta**lam)*\
                                kv(lam,delta*((alpha**2-beta**2)**(1/2)))
    first_factor = first_factor_numerator/first_factor_denominator
    
    second_factor = (delta**2+(x-mu)**2)**((lam-1/2)/2)
    third_factor = kv(lam-1/2,alpha*((delta**2+(x-mu)**2)**(1/2)))
    fourth_factor = math.exp(beta*(x-mu))
    
    return first_factor*second_factor*third_factor*fourth_factor

def likelihood_GH(param,data_list):       
    likelihood = 0 #尤度の初期値
    for i in np.arange(len(data_list)):
        # model output 
        p = GH_dist(data_list[i],param[0],param[1],param[2],param[3],param[4])
        # likelihood 尤度
        likelihood += -np.log(p) #尤度
    return likelihood

#%%分布推定1(株価自体の分布について)
###########後ほどループを回すように変更###################
###########標準化は必要か###################
###########尤度最大化のアルごは###############
train_data = all_data.loc["2018/2/1":"2021/1/8"]


# 正規分布（最尤推定）
norm.fit(list(train_data["price"]))
# t分布（最尤推定）
t.fit(list(train_data["price"]))
# 対数正規分布（最尤推定）
lognorm.fit(list(train_data["price"]))
#%% 分布推定2（リターンの分布について）

#株価をリターンに変換
all_return_weekly = all_data.pct_change(4).dropna()
#使用する期間指定
train_data_return = all_return_weekly.loc["2018/2/1":"2021/1/8"]

# 正規分布（最尤推定）
norm.fit(list(train_data_return["price"]))
# t分布（最尤推定）
t.fit(list(train_data_return["price"]))
# 対数正規分布（最尤推定）
lognorm.fit(list(train_data_return["price"]))
# DLN分布

# GH分布
#パラメータの初期値を設定
init_parameter = [1,3,1,1,1]
#パラメータの探索範囲を指定
bound_parameter = [(-100,100),(-100,100),(-100,100),(-100,100),(-100,100)]
#パラメータの制約条件を指定
cons = ({'type':'ineq','fun':lambda params: params[3]}, {'type':'ineq','fun':lambda params: params[1]-abs(params[2])})
    
#尤度の最大化
optimized_GH = optimize.minimize(likelihood_GH,init_parameter,constraints=cons,bounds = bound_parameter,args=(list(train_data_return["price"])))



#####################どのように分布を選ぶのか###############
#####################パラメータの検定#####################
####################AUC,コルもゴルフ距離，Anderson & Darling 適合度検定統計量###############################

