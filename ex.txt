#パッケージのインポート
import pandas as pd
import math
from scipy.stats import norm
from scipy.stats import lognorm
from scipy.stats import t
from scipy.special import kv


#%% 必要な情報
input_data_path = "C:/Users/ai199/Desktop/wataru/07_年末年始の作業/運企予兆/Nikkei225.csv"
start_train = "2018/4/20"
end_train = "2021/1/8"

# データの読み込み(日次の日経平均株価)
all_data = pd.read_csv(input_data_path,encoding = "shift-jis",index_col=0)
# 訓練データとして使用する時点数（現時点より前で何時点を推定のデータとして使用するか）
use_past_data = 10
#%% GH分布に関する定義

def GH_dist(x,lam,alpha,beta,delta,mu):
    first_factor_numerator = (alpha**2-beta**2)**(lam/2)
    first_factor_denominator =  ((2*math.pi)**(1/2))*(alpha**(lam-1/2))*(delta**lam)*\
                                kv(lam,delta*((alpha**2-beta**2)**(1/2)))
    first_factor = first_factor_numerator/first_factor_denominator
    
    second_factor = (delta**2+(x-mu)**2)**((lam-1/2)/2)
    third_factor = kv(lam-1/2,alpha*((delta**2+(x-mu)**2)**(1/2)))
    fourth_factor = math.exp(beta*(x-mu))
    
    return first_factor*second_factor*third_factor*fourth_factor

def log_likelihood_GH(data_list,lam,alpha,beta,delta,mu):
    n = len(data_list)
    first_factor_numerator = (alpha**2-beta**2)**(lam/2)
    first_factor_denominator =  ((2*math.pi)**(1/2))*(alpha**(lam-1/2))*(delta**lam)*\
                                kv(lam,delta*((alpha**2-beta**2)**(1/2)))
    first_term = n*math.log(first_factor_numerator/first_factor_denominator)
    
    def make_second_term(x):
        return -0.5*math.log(delta**2+(x-mu)**2)
    
    second_term = sum(list(map(make_second_term,data_list)))
    
    def make_third_term(x):
        return math.log(kv(lam-1/2,alpha*((delta**2+(x-mu)**2)**(1/2))))+beta*(x-mu)
    
    third_term = sum(list(map(make_third_term,data_list)))
    
    return first_term + second_term + third_term

#%%分布推定
###########後ほどループを回すように変更###################
###########標準化は必要か###################
###########尤度最大化のアルごは###############
train_data = all_data.loc["2018/2/1":"2021/1/8"]


# 正規分布（最尤推定）
norm.fit(train_data.values)
# t分布（最尤推定）
t.fit(train_data.values)
# 対数正規分布（最尤推定）
lognorm.fit(train_data.values)
# DLN分布
# GH分布




#####################どのように分布を選ぶのか###############
#####################パラメータの検定#####################
####################AUC,コルもゴルフ距離，Anderson & Darling 適合度検定統計量###############################

