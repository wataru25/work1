#####カリブレーション用プログラム


###リスクフリーレート###
dt = 1/250
sigma_r = sd(diff(2*sqrt(r)))/sqrt(dt)
y = r[2:length (r) ]^0.5
x1 = r[1:(length(r) - 1)]^0.5
x2 = r[1:(length(r) - 1)]^(-0.5)
CIR = lm(y ~ x1 + x2 - 1)
summary (CIR)

a_C = as.numeric(2*(CIR$coefficients[1]-1)/dt)
b_C = as.numeric(2*CIR$coefficients[2]/dt)+sigma_r^2/4
alpha_r = -a_C
beta_r = b_C/abs(a_C)
c(alpha_r, beta_r, sigma_r)

###割引債###
compute_k_r = function (k_r){
  k = sqrt((alpha_r + sigma_r * k_r)^2 + 2 * sigma_r^2)
  h = 10
  (k + alpha_r - sigma_r * k_r + (k - alpha_r + sigma_r *
      k_r) * exp(-h * k))/(k + alpha_r + sigma_r *
      k_r + (k - alpha_r - sigma_r * k_r) * exp(-h *
      k)) * beta_r - mean(r10Y)
}

k_r = uniroot (compute_k_r, c(-2, 0)) $root
k_r


###リスク資産###
dt = 1/250
dlnA = diff (log(A) )
mu_A = (mean (dlnA) + 0.5 * var(dlnA) )/dt
mu_A

dr = diff (r)
dlnA_dr = merge(dlnA, dr, all = FALSE)
sigma_Ar = (cov(dlnA_dr [, 1], dlnA_dr[, 2]))/(sigma_r * beta_r * dt)
sigma_A = sqrt ((var (dlnA) )/dt - sigma_Ar^2 * beta_r)
c (sigma_Ar, sigma_A)

xi_A = (mu_A - k_r * sigma_Ar * beta_r - beta_r)/sigma_A
xi_A

###保険料###
dt = 1
dlnw = diff (log (w))
mu_c = as.numeric(mean(dlnw) + 0.5 * var (dlnw) )/dt
mu_c

#S&P500を年率に変換
dlnAY = apply.yearly(dlnA, mean)*250
# dinAY=yearlyReturn(as. xts (A) , type= 'log')
sigma_cA = as.numeric(cov(dlnw, dlnAY) / (sigma_A * dt) )
sigma_cr = as.numeric (sqrt ((var (dlnw)/dt - sigma_cA^2)/beta_r) )
c (sigma_cA, sigma_cr)

k_l = k_r

###死力###
##Gompertzモデル
phi_GM = c(NA, NA)
b_GM = c(NA, NA)
m_GM = c(NA, NA)
lambda_M = USAlife_M$mx [, 1]
lambda_F = USAlife_F$mx [, 1]

#男性
fit_M = nls(lambda_M ~ a1 + a2 * exp(a3 * seq(0, N-1)), start = list(a1 = 0.1, a2 = 0.1, a3 = 0.1))
summary (fit_M)
phi_GM[1] = coef (fit_M) [1]
b_GM [1] = 1/coef (fit_M) [3]
m_GM[1] = age - b_GM[1] * log(b_GM[1] * coef (fit_M) [2])
c (phi_GM [1] , b_GM[1] , m_GM[1])
#女性
fit_F = nls (lambda_F ~ a1 + a2 * exp(a3 * seq(0, N -1) ), start = list(a1 = 0.1, a2 = 0.1, a3 = 0.1))
summary (fit_F)
phi_GM [2] = coef (fit_F) [1]
b_GM [2] = 1/coef (fit_F) [3]
m_GM [2] = age - b_GM[2] * log(b_GM[2] * coef (fit_F) [2])
c(phi_GM [2], b_GM[2],m_GM [2])

#フィット後のグラフ
matplot (seq(age, age + N - 1), cbind(lambda_M, lambda_F) ,
         type = "l", ylab = "", xlab = "age", col = c("blue","red") , lty = 1)
grid()
matlines (seq(age, age + N - 1), cbind(predict (fit_M,list (x = seq(age, age + N - 1) )), 
                                       predict (fit_F,list (x = seq(age, age + N - 1)) ) ), col = c("blue","red") , lty = 3)
legend ("topleft", legend = c("males", "females"), col = c("blue","red") , lty = 1, bty = "n")

##確率的な死力のモデル
#各種設定
dt = 1
age = 25
sigma_l = c(sd(diff (2*sqrt(lambda_M)))/sqrt(dt),sd(diff(2*sqrt(lambda_F)))/sqrt(dt))
alpha_l = c(0.1, 0.1)
phi_l = phi_GM
m_l = m_GM
b_l = b_GM
#βの推計(男性)
N = length (lambda_M)
y = 2 * sqrt (lambda_M[2: N])
x1 = 2 * sqrt (lambda_M[1 : (N - 1)])
x2 = (2 * sqrt (lambda_M[1: (N - 1)]))^(-1)
x3 = seq(1, N - 1) * dt
longevity = nls(y ~ beta1 * x1 + beta2 * x2 + beta3 *exp (beta4 * x3) * x2,
                start = list(beta1 = 1 -alpha_l[1] * dt/2, 
                             beta2 = 2 * dt * (alpha_l[1] *phi_l[1] - 0.25 * sigma_l[1]^2), 
                             beta3 = 2 * dt *(1/b_l[1] + alpha_l[1])/b_l[1] * exp((age - m_l[1])/b_l[1]),
                             beta4 = 1/b_l[1]) )
summary (longevity)
#確率的モデルが持つパラメータへの変換（男性）
alpha_l [1] = 2 * (1 - coef (longevity) [1])/dt
phi_l [1] = (coef (longevity) [2]/(2 * dt) + 0.25 * sigma_l[1]^2)/alpha_l[1]
b_l[1] = 1/coef (longevity) [4]
m_l[1] = age - b_l[1] * log(coef (longevity)[3] * b_l[1]/(2 *dt * (1/b_l[1] + alpha_l[1])))
c(alpha_l[1], phi_l[1], b_l[1], m_l[1], sigma_l[1])
##βの推計(女性)
N = length(lambda_F)
y = 2 * sqrt(lambda_F[2:N])
x1 = 2 * sqrt(lambda_F[1:(N - 1)])
x2 = (2 * sqrt(lambda_F[1:(N-1)]))^(-1)
x3 = seq(1, N - 1) * dt
longevity = nls(y ~ beta1 * x1 + beta2 * x2 + beta3 *exp (beta4 * x3) * x2, 
                start = list (beta1 = 1 -alpha_l[2] * dt/2, 
                              beta2 = 2 * dt * (alpha_l[2] *phi_l[2] - 0.25 * sigma_l[2]^2),
                              beta3 = 2 * dt *(1/b_l[2] + alpha_l[2])/b_l[2] * exp((age - m_l[2])/b_l[2]),
                              beta4 = 1/b_l[2]))

summary (longevity)

#確率的モデルが持つパラメータへの変換（女性）
alpha_l[2] = 2 * (1 - coef(longevity)[1])/dt
phi_l[2]=(coef (longevity) [2]/(2 * dt) + 0.25 * sigma_l[2]^2) /alpha_l[2]
b_l[2]=1/ coef (longevity) [4]
m_l[2]= age - b_l[2] * log(coef(longevity) [3] * b_l[2]/ (2 *dt* (1/b_l[2] + alpha_l[2])))
c(alpha_l[2], phi_l[2], b_l[2] , m_l[2], sigma_l[2])

#シミュレーション（男性）
M = 10
x = array (0, dim = c(N, M) )
x [1, ] = rep(lambda_M[1] , M)
dt = 1
for (i in 2:N) {
  dx = alpha_l[1] * (phi_l[1] + (1/alpha_l[1]/b_l[1] +1) /b_l[1] * exp((age + i - 1 - m_l[1])/b_l[1])-
                       x[i - 1, ]) * dt + sigma_l[1] * sqrt(x[i-1, ]) * rnorm(M) * sqrt(dt)
  x [i, ] = x[i - 1, ] + dx
}
matplot (seq(age, age + N - 1), x, type = "l", col = "gray",lty = 1, xlab = "age", ylab = "")
lines (seq(age, age + N - 1), lambda_M, type = "l")
grid()

#シミュレーション（女性）
M = 10
x = array (0, dim = c(N, M))
x[1, ] = rep (lambda_F[1] , M)
dt = 1
for (i in 2:N) {
  dx = alpha_l[2] * (phi_l[2] + (1/alpha_l[2]/b_l[2] +1) /b_l[2] * exp((age + i - 1 - m_l[2])/b_l[2])-
                    x[i - 1, ]) * dt + sigma_l[2] * sqrt (x[i -1, ]) * rnorm(M) * sqrt(dt)
  x[i, ] = x[i - 1, ] + dx
}
matplot (seq(age, age + N - 1), x, type = "l", col = "gray",lty = 1, xlab = "age", ylab = "")
lines (seq(age, age + N - 1), lambda_F, type = "l")
grid()

##生存率
Prob = function(t, T, l, age, sex) {
  C = function(t, T) {
    k = sqrt(alpha_l[sex]^2 + 2 * sigma_l[sex]^2)
    2 * (1 - exp(-(T - t) * k))/(k + alpha_l [sex]+(k - alpha_l [sex]) * exp(-(T - t) * k) )
  }
  
  beta = function (s) {
    phi_l[sex] + (1/(alpha_l[sex] * b_l[sex]) +
                     1) /b_l[sex] * exp((age + s - m_l[sex] )/b_l[sex])
    
  }
  INT = function(s) {
    beta(s) * C(t, s)
  }
  exp (-alpha_l[sex] * integrate(INT, t, T)$value-
         C (t , T) * l)
}

age = 25
M = 10
N = 120 - age
x_m = array (0, dim = c(N, M))
x_f = array (0, dim = c(N, M))

P_m = array (0, dim = c(N, M))
P_f = array (0, dim = c(N, M))

x_m[1, ] = rep(lambda_M[1], M)
x_f [1, ] = rep(lambda_F[1],M)
P_m [1, ] = rep(Prob(t = 0, T = 1, l = lambda_M[1],age = age, sex = 1), M)
P_f [1, ] = rep(Prob(t = 0, T = 1, l = lambda_F[1],age = age, sex = 2) ,M)
dt = 1
for (i in 2:N) {
  dx_m = alpha_l[1] * (phi_l[1] + (1/alpha_l[1]/b_l[1]+1)/b_l[1] * exp((age + i - 1 - m_l[1])/b_l[1]) -
                         x_m[i - 1, ]) * dt + sigma_l[1] * sqrt(x_m[i-1, ]) * rnorm(M) * sqrt(dt)
  dx_f = alpha_l[2] * (phi_l[2] + (1/alpha_l[2]/b_l[2]+1)/b_l[2] * exp((age + i - 1 - m_l[2])/b_l[2]) -
                         x_f[i - 1, ]) * dt + sigma_l[2] * sqrt(x_f[i - 1, ])*rnorm(M) * sqrt(dt)
  x_m[i, ] = x_m[i - 1, ] + dx_m
  x_f[i, ] = x_f[i - 1, ] + dx_f
  P_m[i, ] = Prob(t = 0, T = 1,l = x_m[i, ], age = 24 +i, sex = 1)
  P_f[i, ] = Prob(t = 0, T = 1,l = x_f[i, ], age = 24 +i, sex = 2)
}
matplot (seq(age, age + N - 1), P_m, type = "l", col = "lightblue",
         lty = 1, xlab = "age", ylab = "")
matlines (seq(age, age + N - 1), P_f, type = "l", col = "lightpink",
          lty = 1, xlab = "age", ylab = "")
lines (seq(age, age + N - 1), rowMeans (P_m, na.rm = T) ,
       type = "l", col = "blue")
lines (seq(age, age + N - 1), rowMeans (P_f, na.rm = T) ,
       type = "l", col = "red")
legend ("bottomleft", legend = c("males", "females"),
        lty = 1, col = c("blue", "red"), bty = "n")
grid ()


